Oh boy is this unorganized :]

--------  THINGS TO REWORK  --------

---  VideoCameraRig  ---
Uses a seperate camera and a canvas. Ends up working like a render texture camera
Could scale it up, put it in worldspace, idk

Screen position out of view frustum errors
Cancel fov changes on vr camera (or silence the warnings at least)

---  PauseMenu  ---
Move pause camera closer


---  Mouse Input  ---
Could try to use a controller as a pointer for the Cursor
Would have to patch/rework the Cursor

Seems to work best when the main cam is pointing perpendicular to the UI "screen"
Makes sense since thats how it'd work on flatscreen


---  Tracked Input  ---
Create a little steamvr tracking rig in Unity and port it in
Patch/rework Cursor and Interactable stuff to accept input from the VrRig



------  CABIN  ------




--------  MISC STUFF  --------

---  Cameras & UI
Most of the camera stuff (at least for GBC ones) are just a prefab,
so I could probably modify the camera stuff based off the prefab, as opposed to per scene.

Idk if I could modify the prefab itself and load that instead?

Check to see if thats true for the cabin scenes

Can do height calibration and use that to find the tracking-root position for the current view

---  VR Interactions  ---
Move player figurine by picking it up manually
Grabbing and holding pickups in your hands

Holding your deck
	- deck in left hand, draw cards/interact with right
	- grab card out of deck with right hand to play it
	- deck leaves hand, can use left hand to select sacrifices
	  (can grab deck w left hand to back out)
	- play card with right hand


Have to create actions and binds (with the correct appkey/url)
Patch game inputs or subscribe steamvr inputs to game ones

Do HL:A style boundaries when you stick your head into a wall.
Blur screen out and point player back, if they're outside the playable area ramp up glitch effects too.
	
---  View Stuff  ---
ViewController is in charge of what Views can be accessed from the current one and how.
ViewManager is in charge of moving the PixelCameraParent, changing the view (+ moving the camera and handModel accordingly), 
	displaying button hints for a view, and contains all the view transforms (relative to fpsController position).

FirstPersonController is in charge of changing navigation zones

---  InteractionCursor  ---
Controls the position of the cursor, what interactable it's hovering over, and what cursor sprites to show.

RaycastForInteractable:
gets the screenPos of the cursor's worldPos using OrthoUICam,
and fires a ray out of the main cam using that screenPos


update = 
update cursor position using orthoUICam
set cursor down sprite if Selecting
show altInput if still hovering over altInteractable
show altInput hint (rClick sprite) if player hasnt used alt input yet
set altInput down sprite if AltSelecting
update currentInteractable: RaycastForInteractable, current.exit if new != current, new.enter if new is not null
update Main Input: if current != null current.stay and set mainCursorType to current.cursorType,
	if Selecting run current.SelectStart and set cursorDownInteractable, if deSelecting run current.SelectEnd
